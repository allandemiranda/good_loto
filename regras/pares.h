/**
 * @brief Regras geradas pela analise dos númros Pares
 * 
 * @file pares.h
 * @author Allan de Miranda Silva
 * @date 10-09-2018
 */
#include <iterator>
#include <vector>
#include <algorithm>
#include <cmath>

bool pares_soma(int *inicial){
    bool bandeira;
    int numeros_p_analise[] = {2,4,6,8,10,12,14,16,18,20,22,24}; // números da cartela
    int soma(0);

    // primeiro definição    
    bandeira = true;
    for(int *i=inicial; i<(inicial+15); ++i){
        for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
            if(*i == *j){
                soma += *i;
                break;
            }
        }
    }
        //### Editar variaveis
    int numeros_verdade_um[] = {48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138};
    for(int *i=std::begin(numeros_verdade_um); i<std::end(numeros_verdade_um); ++i){
        if(*i == soma){
            bandeira = false;
            break;
        }
    }
    if(bandeira){
        return false;        
    }

    // fim
    return true;
}

bool pares_ocorrencias(int *inicial){
    // primeiro definição
    int numeros_p_analise[] = {2,4,6,8,10,12,14,16,18,20,22,24}; // números  da cartela
    int cont(0);
    for(int *i=inicial; i<(inicial+15); ++i){
        for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
            if(*i == *j){
                cont++;
                break;
            }
        }
    }
    if((cont < 4) or (cont > 10)){
        return false;        
    }

    int quantidade_de_jogos_sorteados = std::distance(std::begin(numeros_sorteados), std::end(numeros_sorteados)) / 15;
    int analise_padrao;
    int cont_analise_padrao;

    // segunda definição
    analise_padrao = 2;
    if((quantidade_de_jogos_sorteados+analise_padrao-1)%analise_padrao == 0){
        cont_analise_padrao = 0;
        for(int *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - analise_padrao))); i<std::end(numeros_sorteados); ++i){
            for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){            
                if(*i == *j){
                    cont_analise_padrao++;
                    break;
                }
            }
        }
        if(((cont + cont_analise_padrao) < 10) or ((cont + cont_analise_padrao) > 18)){        
            return false;
        }
    }

    // terceira definição
    analise_padrao = 3;
    if((quantidade_de_jogos_sorteados+analise_padrao-1)%analise_padrao == 0){
        cont_analise_padrao = 0;
        for(int *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - analise_padrao))); i<std::end(numeros_sorteados); ++i){
            for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){            
                if(*i == *j){
                    cont_analise_padrao++;
                    break;
                }
            }
        }
        if(((cont + cont_analise_padrao) < 17) or ((cont + cont_analise_padrao) > 26)){
            return false;
        }
    }
    

    // quarta definição
    analise_padrao = 5;
    if((quantidade_de_jogos_sorteados+analise_padrao-1)%analise_padrao == 0){
        cont_analise_padrao = 0;
        for(int *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - analise_padrao))); i<std::end(numeros_sorteados); ++i){
            for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){            
                if(*i == *j){
                    cont_analise_padrao++;
                    break;
                }
            }
        }
        if(((cont + cont_analise_padrao) < 30) or ((cont + cont_analise_padrao) > 42)){
            return false;
        }
    }    

    // quarta definição
    analise_padrao = 8;
    if((quantidade_de_jogos_sorteados+analise_padrao-1)%analise_padrao == 0){
        cont_analise_padrao = 0;
        for(int *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - analise_padrao))); i<std::end(numeros_sorteados); ++i){
            for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){            
                if(*i == *j){
                    cont_analise_padrao++;
                    break;
                }
            }
        }
        if(((cont + cont_analise_padrao) < 50) or ((cont + cont_analise_padrao) > 66)){
            return false;
        }
    }  

    // quarta definição
    analise_padrao = 13;
    if((quantidade_de_jogos_sorteados+analise_padrao-1)%analise_padrao == 0){
        cont_analise_padrao = 0;
        for(int *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - analise_padrao))); i<std::end(numeros_sorteados); ++i){
            for(int *j=std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){            
                if(*i == *j){
                    cont_analise_padrao++;
                    break;
                }
            }
        }
        if(((cont + cont_analise_padrao) < 84) or ((cont + cont_analise_padrao) > 102)){
            return false;
        }
    }   

    return true;
}

bool pares_binario(int *inicial){
    int tamanho_amostra;
    int numeros_p_analise[] = {2,4,6,8,10,12,14,16,18,20,22,24}; // números da cartela
    int tamanho_analise = std::distance(std::begin(numeros_p_analise), std::end(numeros_p_analise));          
    size_t binario[tamanho_analise];
    int posicao;
    int binario_final;
    std::vector <int> novo_jogo; 
    int quantidade_de_jogos_sorteados = std::distance(std::begin(numeros_sorteados), std::end(numeros_sorteados)) / 15;

    //primeira analise
    
    for(auto*i=inicial; i<(inicial+15); ++i){
        novo_jogo.push_back(*i);
    }
    
    for(int j(0); j<tamanho_analise; ++j){
        binario[j] = 0;
    }
    
    posicao = 0;
    for(auto *j = std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
        for(auto k(0); k<15; ++k){
            if(*j == novo_jogo[k]){
                binario[posicao] = 1;
            }
        }
        ++posicao;
    }
    binario_final = 0;
    for(int j(0); j<tamanho_analise; ++j){
        if(binario[j]==1){
            binario_final += std::pow(10, j);
        }
    }
    novo_jogo.clear();    

        // #### análise ### Modificar variáveis
    size_t lista_extra [] = {
        100101, 110101, 1011101, 1101111, 1111011, 10010111, 10011111, 10110000, 10110111, 10111000, 10111001, 10111010, 10111011, 10111100, 10111101, 10111111, 11011100, 11101001, 11101011, 11101111, 11110001, 11110111, 11111100, 11111110, 100011011, 100011101, 100110110, 100110111, 100111000, 100111011, 100111101, 100111111, 101011010, 101011011, 101100010, 101100111, 101101110, 110001111, 110010001, 110010101, 110011000, 110011011, 110011111, 110101111, 110110001, 110111011, 110111100, 111001001, 111010001, 111010011, 111011000, 111011001, 111011011, 111011111, 111100101, 111100110, 111101010, 111101011, 111101110, 111101111, 111110100, 111110101, 111111011, 111111101, 111111110, 111111111, 1000011111, 1000101111, 1000110101, 1000110111, 1000111011, 1000111100, 1001001100, 1001001111, 1001010111, 1001011100, 1001011111, 1001101111, 1001110011, 1001110111, 1001111011, 1001111100, 1001111111, 1010000111, 1010001010, 1010010111, 1010011110, 1010011111, 1010100011, 1010100111, 1010101101, 1010110010, 1010110111, 1010111001, 1010111010, 1010111101, 1010111111, 1011000111, 1011001110, 1011001111, 1011010010, 1011010011, 1011010111, 1011011011, 1011011101, 1011011110, 1011100101, 1011100110, 1011101010, 1011101011, 1011101110, 1011110011, 1011110100, 1011110111, 1011111000, 1011111001, 1011111010, 1011111101, 1011111110, 1100000111, 1100001101, 1100001111, 1100010011, 1100011110, 1100011111, 1100100110, 1100101111, 1100110010, 1100110111, 1100111000, 1100111010, 1100111110, 1101000101, 1101000111, 1101001010, 1101001011, 1101010011, 1101010100, 1101010111, 1101011001, 1101011010, 1101011011, 1101011101, 1101101010, 1101101011, 1101101111, 1101110011, 1101110100, 1101111000, 1101111001, 1101111010, 1101111011, 1101111101, 1101111111, 1110001101, 1110001111, 1110010101, 1110010110, 1110010111, 1110011011, 1110011101, 1110100011, 1110100110, 1110101001, 1110101101, 1110101111, 1110110001, 1110110011, 1110111101, 1111000011, 1111000101, 1111000111, 1111001000, 1111001001, 1111001100, 1111001111, 1111010000, 1111010001, 1111010101, 1111010110, 1111010111, 1111011001, 1111011010, 1111011011, 1111011100, 1111011101, 1111011111, 1111100010, 1111100011, 1111101000, 1111101001, 1111101010, 1111101011, 1111101100, 1111110000, 1111110001, 1111110010, 1111110100, 1111110111, 1111111000, 1111111100, 1111111101, 1111111110, 1111111111, 10000100100, 10000101101, 10000101110, 10000110110, 10000111110, 10000111111, 10001001011, 10001001111, 10001010011, 10001010111, 10001011100, 10001011101, 10001100111, 10001101111, 10001110101, 10001110111, 10001111001, 10001111110, 10001111111, 10010010110, 10010100011, 10010100101, 10010101010, 10010101101, 10010110111, 10010111101, 10011001011, 10011001111, 10011010010, 10011010100, 10011010111, 10011011101, 10011011111, 10011100110, 10011101011, 10011110001, 10011110011, 10011110100, 10011110101, 10011110110, 10011110111, 10011111000, 10011111010, 10011111011, 10011111110, 10011111111, 10100010111, 10100011011, 10100101011, 10100101110, 10100110011, 10100110101, 10100110111, 10100111001, 10100111101, 10101000111, 10101011101, 10101011111, 10101100100, 10101101101, 10101101110, 10101101111, 10101110001, 10101110101, 10101110110, 10101110111, 10101111001, 10101111010, 10101111011, 10110001101, 10110001111, 10110010110, 10110011011, 10110011100, 10110011111, 10110100100, 10110100101, 10110100110, 10110100111, 10110101011, 10110101110, 10110101111, 10110110001, 10110110101, 10110111010, 10110111011, 10110111100, 10110111101, 10111000001, 10111000101, 10111000111, 10111001001, 10111001100, 10111001101, 10111010010, 10111010011, 10111010101, 10111010110, 10111011010, 10111011101, 10111100001, 10111101000, 10111101011, 10111101100, 10111101101, 10111110010, 10111110011, 10111110100, 10111110111, 10111111010, 10111111100, 10111111101, 10111111110, 10111111111, 11000010110, 11000100111, 11000101010, 11000101011, 11000101110, 11000101111, 11000110011, 11000110111, 11000111011, 11000111100, 11001000011, 11001000110, 11001000111, 11001001000, 11001001110, 11001001111, 11001010010, 11001010110, 11001011000, 11001011100, 11001011101, 11001011111, 11001100011, 11001100101, 11001100110, 11001100111, 11001101001, 11001101101, 11001110011, 11001110100, 11001110111, 11001111000, 11001111010, 11001111011, 11001111101, 11010001010, 11010001110, 11010001111, 11010010010, 11010011011, 11010011110, 11010011111, 11010101001, 11010101010, 11010101011, 11010101110, 11010110100, 11010110111, 11010111001, 11010111101, 11010111111, 11011000011, 11011000101, 11011000110, 11011001001, 11011001011, 11011001100, 11011001101, 11011001110, 11011010001, 11011010010, 11011010111, 11011011000, 11011011011, 11011011100, 11011011110, 11011011111, 11011100010, 11011100111, 11011101001, 11011101010, 11011101100, 11011101110, 11011101111, 11011110000, 11011110010, 11011110101, 11011111010, 11011111011, 11011111101, 11011111110, 11100000011, 11100000101, 11100001000, 11100001010, 11100001100, 11100001101, 11100001111, 11100010010, 11100010101, 11100010110, 11100010111, 11100011000, 11100011011, 11100011110, 11100011111, 11100100011, 11100100110, 11100100111, 11100101001, 11100101101, 11100101110, 11100101111, 11100110001, 11100110011, 11100110101, 11100110111, 11100111000, 11100111001, 11100111011, 11100111101, 11100111110, 11100111111, 11101000011, 11101000101, 11101001001, 11101001010, 11101001110, 11101010000, 11101010011, 11101010101, 11101010110, 11101010111, 11101011001, 11101011010, 11101011011, 11101011110, 11101100010, 11101100101, 11101100110, 11101101001, 11101101010, 11101101101, 11101110010, 11101110011, 11101110100, 11101111000, 11101111001, 11101111010, 11101111011, 11101111100, 11101111101, 11101111111, 11110000101, 11110000111, 11110001111, 11110010011, 11110010101, 11110010110, 11110010111, 11110011010, 11110011011, 11110011100, 11110011101, 11110011110, 11110011111, 11110100100, 11110100101, 11110100110, 11110101010, 11110101011, 11110110010, 11110110101, 11110111001, 11110111010, 11110111011, 11111000010, 11111000101, 11111000111, 11111001001, 11111001010, 11111001011, 11111010010, 11111010011, 11111010100, 11111011000, 11111011001, 11111011010, 11111011011, 11111011100, 11111011101, 11111100001, 11111100010, 11111100011, 11111100100, 11111100110, 11111101000, 11111101001, 11111101010, 11111101011, 11111101100, 11111101110, 11111110001, 11111110010, 11111110011, 11111110100, 11111110101, 11111110111, 11111111011, 11111111101, 100000001011, 100000010111, 100000110011, 100000110111, 100000111100, 100000111101, 100000111111, 100001010110, 100001010111, 100001011010, 100001011011, 100001100111, 100001101110, 100001101111, 100001110001, 100001111001, 100001111011, 100001111100, 100001111110, 100010000110, 100010010010, 100010011010, 100010100001, 100010110001, 100010110110, 100010111110, 100010111111, 100011001011, 100011010011, 100011010100, 100011010101, 100011010111, 100011011001, 100011011101, 100011011110, 100011011111, 100011101011, 100011101100, 100011101110, 100011110010, 100011110011, 100011110110, 100011111001, 100011111010, 100011111011, 100011111110, 100100000111, 100100001001, 100100010010, 100100010101, 100100010111, 100100011110, 100100100111, 100100101110, 100100110111, 100100111010, 100100111100, 100100111111, 100101000111, 100101001011, 100101011010, 100101011011, 100101011111, 100101100100, 100101100110, 100101100111, 100101101010, 100101101011, 100101101101, 100101101111, 100101110001, 100101110010, 100101110100, 100101110110, 100101110111, 100101111010, 100101111011, 100101111101, 100101111110, 100110001101, 100110001111, 100110010001, 100110010100, 100110010110, 100110010111, 100110011010, 100110011111, 100110100011, 100110100110, 100110101001, 100110110001, 100110110011, 100110110100, 100110110101, 100110111010, 100110111011, 100110111111, 100111000001, 100111000011, 100111001001, 100111001010, 100111001101, 100111001110, 100111010001, 100111010010, 100111010100, 100111010101, 100111010110, 100111010111, 100111011001, 100111011010, 100111100100, 100111100101, 100111100110, 100111101110, 100111101111, 100111110001, 100111110011, 100111110101, 100111110110, 100111110111, 100111111000, 100111111010, 100111111011, 100111111101, 100111111111, 101000001111, 101000010011, 101000011010, 101000011111, 101000100011, 101000100111, 101000101011, 101000101101, 101000110000, 101000110001, 101000110011, 101000110111, 101000111011, 101000111100, 101000111101, 101000111110, 101000111111, 101001000101, 101001000111, 101001001111, 101001010001, 101001010110, 101001011001, 101001011011, 101001011101, 101001011111, 101001100011, 101001100100, 101001100110, 101001101010, 101001101011, 101001101101, 101001101110, 101001101111, 101001110001, 101001110100, 101001110101, 101001110110, 101001111001, 101001111010, 101001111100, 101001111101, 101001111111, 101010010010, 101010010110, 101010011010, 101010011101, 101010011110, 101010100000, 101010100110, 101010101010, 101010101011, 101010101110, 101010110001, 101010110100, 101010110110, 101010110111, 101010111110, 101010111111, 101011000011, 101011001101, 101011001110, 101011001111, 101011010011, 101011010100, 101011011000, 101011011001, 101011011010, 101011011100, 101011011101, 101011011111, 101011100010, 101011100101, 101011100110, 101011101110, 101011110001, 101011110010, 101011110011, 101011110101, 101011110111, 101011111001, 101011111100, 101011111101, 101011111110, 101100000010, 101100000111, 101100001001, 101100001011, 101100001101, 101100001110, 101100010101, 101100010111, 101100011010, 101100011011, 101100011101, 101100011110, 101100011111, 101100100011, 101100100111, 101100101011, 101100101101, 101100101111, 101100110001, 101100110100, 101100110101, 101100110110, 101100110111, 101100111011, 101100111100, 101100111110, 101101000001, 101101000110, 101101001000, 101101001011, 101101001100, 101101001110, 101101010010, 101101010011, 101101010111, 101101011001, 101101011101, 101101011110, 101101100001, 101101100010, 101101100101, 101101101100, 101101101101, 101101101111, 101101110001, 101101110011, 101101110100, 101101110101, 101101110111, 101101111000, 101101111001, 101101111010, 101101111011, 101101111100, 101101111110, 101101111111, 101110000111, 101110001000, 101110001001, 101110001110, 101110001111, 101110010001, 101110011001, 101110011011, 101110011100, 101110011101, 101110011110, 101110100000, 101110100001, 101110100101, 101110100110, 101110100111, 101110101000, 101110101010, 101110101011, 101110101110, 101110101111, 101110110010, 101110110100, 101110110101, 101110111000, 101110111010, 101110111100, 101111000000, 101111000111, 101111001000, 101111001011, 101111001101, 101111001110, 101111010010, 101111010011, 101111010101, 101111010110, 101111010111, 101111011000, 101111011001, 101111011010, 101111011011, 101111011100, 101111011110, 101111011111, 101111100001, 101111100010, 101111100011, 101111100100, 101111100101, 101111100111, 101111101110, 101111110000, 101111110010, 101111110011, 101111110100, 101111110110, 101111110111, 101111111010, 101111111011, 101111111100, 101111111101, 101111111111, 110000001101, 110000001110, 110000011110, 110000101100, 110000101111, 110000111010, 110000111110, 110001000010, 110001000011, 110001000111, 110001001001, 110001001100, 110001010110, 110001011000, 110001011001, 110001011011, 110001011111, 110001100011, 110001100101, 110001100110, 110001101011, 110001101101, 110001101110, 110001110010, 110001110101, 110001110111, 110001111000, 110001111110, 110001111111, 110010000111, 110010001001, 110010001011, 110010001110, 110010010111, 110010011011, 110010011101, 110010011111, 110010100111, 110010101001, 110010101011, 110010101100, 110010110010, 110010110101, 110010110110, 110010110111, 110010111000, 110010111010, 110010111101, 110011000010, 110011000011, 110011000111, 110011001011, 110011001110, 110011001111, 110011010010, 110011010011, 110011010110, 110011010111, 110011011100, 110011011101, 110011100011, 110011100101, 110011100110, 110011100111, 110011101000, 110011101001, 110011101011, 110011101101, 110011101110, 110011101111, 110011110010, 110011110011, 110011110110, 110011110111, 110011111001, 110011111010, 110011111011, 110011111110, 110011111111, 110100000011, 110100000110, 110100001010, 110100001111, 110100010101, 110100010111, 110100011011, 110100011111, 110100100011, 110100100111, 110100101001, 110100101010, 110100101100, 110100101101, 110100101110, 110100110011, 110100110100, 110100110101, 110100110110, 110100110111, 110100111010, 110100111011, 110100111101, 110100111110, 110100111111, 110101000110, 110101001001, 110101001100, 110101001101, 110101001110, 110101001111, 110101010000, 110101010100, 110101010111, 110101011101, 110101011110, 110101011111, 110101100011, 110101100101, 110101100110, 110101100111, 110101101010, 110101101100, 110101101101, 110101101110, 110101101111, 110101110101, 110101110111, 110101111000, 110101111001, 110101111010, 110101111011, 110101111100, 110110000011, 110110000100, 110110000101, 110110000111, 110110001010, 110110001011, 110110001101, 110110010000, 110110010011, 110110011001, 110110011010, 110110011011, 110110011100, 110110011111, 110110100000, 110110100011, 110110100100, 110110100110, 110110100111, 110110101001, 110110101011, 110110101100, 110110101110, 110110101111, 110110110001, 110110110011, 110110110100, 110110110101, 110110110111, 110110111000, 110110111010, 110110111011, 110110111100, 110111000100, 110111000110, 110111000111, 110111001001, 110111001011, 110111001101, 110111001111, 110111010000, 110111010100, 110111010111, 110111011000, 110111011001, 110111011010, 110111011011, 110111011100, 110111011101, 110111100001, 110111100100, 110111100111, 110111101001, 110111101110, 110111110000, 110111110001, 110111110010, 110111110100, 110111110110, 110111110111, 110111111011, 110111111101, 110111111110, 110111111111, 111000000111, 111000001011, 111000001110, 111000010111, 111000011010, 111000011011, 111000100010, 111000100111, 111000101011, 111000110011, 111000110110, 111000110111, 111000111000, 111000111001, 111000111010, 111000111011, 111000111101, 111000111110, 111000111111, 111001000011, 111001000111, 111001001101, 111001001110, 111001010101, 111001010110, 111001010111, 111001011010, 111001011011, 111001011100, 111001011101, 111001100011, 111001100100, 111001100110, 111001100111, 111001101011, 111001101100, 111001110000, 111001110001, 111001110011, 111001110101, 111001110110, 111001110111, 111001111001, 111001111010, 111001111011, 111001111100, 111001111110, 111010000010, 111010000101, 111010000110, 111010001101, 111010001110, 111010001111, 111010010101, 111010011001, 111010011010, 111010100001, 111010100100, 111010100110, 111010101010, 111010101011, 111010101100, 111010101110, 111010101111, 111010110000, 111010110011, 111010110110, 111010111000, 111010111010, 111010111011, 111010111100, 111010111101, 111010111110, 111010111111, 111011000110, 111011000111, 111011001001, 111011001010, 111011001100, 111011001101, 111011001110, 111011010001, 111011010010, 111011010011, 111011010100, 111011010101, 111011011000, 111011011010, 111011011011, 111011011110, 111011100001, 111011100011, 111011100101, 111011100110, 111011100111, 111011101001, 111011101011, 111011101101, 111011110000, 111011110011, 111011110101, 111011110110, 111011111000, 111011111001, 111011111010, 111011111101, 111100000010, 111100001101, 111100010101, 111100010110, 111100010111, 111100011001, 111100011100, 111100011101, 111100011110, 111100011111, 111100100001, 111100100011, 111100100110, 111100100111, 111100101011, 111100101110, 111100101111, 111100110100, 111100110101, 111100110110, 111100111000, 111100111001, 111100111011, 111100111101, 111101000001, 111101000010, 111101000011, 111101000111, 111101001011, 111101001101, 111101001111, 111101010001, 111101010010, 111101010011, 111101010101, 111101010110, 111101010111, 111101011000, 111101011001, 111101011010, 111101011100, 111101011101, 111101100001, 111101100101, 111101100110, 111101100111, 111101101000, 111101101001, 111101101010, 111101101100, 111101101101, 111101110001, 111101110010, 111101110011, 111101110100, 111101110101, 111101110111, 111101111000, 111101111001, 111101111010, 111101111100, 111101111111, 111110000001, 111110000010, 111110000101, 111110000110, 111110000111, 111110001000, 111110001001, 111110001011, 111110001101, 111110001110, 111110001111, 111110011001, 111110011011, 111110011111, 111110100000, 111110100001, 111110100100, 111110100101, 111110100110, 111110100111, 111110101000, 111110101100, 111110101101, 111110101111, 111110110000, 111110110001, 111110110010, 111110110100, 111110110101, 111110110110, 111110111001, 111110111100, 111110111101, 111111000001, 111111000010, 111111000011, 111111000101, 111111000110, 111111000111, 111111001001, 111111001010, 111111001011, 111111001110, 111111010100, 111111010101, 111111011000, 111111011001, 111111011011, 111111011100, 111111100000, 111111100100, 111111100110, 111111101001, 111111101010, 111111101101, 111111101110, 111111101111, 111111110000, 111111110001, 111111110011, 111111110100, 111111110101, 111111110110, 111111111000, 111111111001, 111111111010
    };
    bool flag_extra(true);
    for(auto *i=std::begin(lista_extra); i<std::end(lista_extra); ++i){
        if(binario_final == *i){
            flag_extra = false;
            break;
        }
    }
    if(flag_extra){
        return false;
    }

    //segunda analise
    tamanho_amostra = 2; // Dois jogos
    if((quantidade_de_jogos_sorteados+tamanho_amostra-1)%tamanho_amostra == 0){
        for(auto *i=inicial; i<(inicial+15); ++i){
            novo_jogo.push_back(*i);
        }
        for(auto *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - tamanho_amostra))); i<std::end(numeros_sorteados); ++i){
            novo_jogo.push_back(*i);
        }

        for(auto j(0); j<tamanho_analise; ++j){
            binario[j] = 0;
        }
        
        posicao = 0;
        for(auto *j = std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
            for(auto k(0); k<tamanho_amostra*15; ++k){
                if(*j == novo_jogo[k]){
                    binario[posicao] = 1;
                }
            }
            ++posicao;
        }
        binario_final = 0;
        for(auto j(0); j<tamanho_analise; ++j){
            if(binario[j]==1){
                binario_final += std::pow(10, j);
            }
        }
        novo_jogo.clear();    

            // #### análise ### Modificar variáveis
        size_t lista_um [] = {
            11111111, 101111111, 111111111, 1010111110, 1110101111, 1111011101, 1111011111, 1111101101, 1111110111, 1111111001, 1111111101, 1111111111, 10001111111, 10011111111, 10110110101, 10110111011, 10111010111, 10111011111, 10111101101, 10111111011, 10111111101, 10111111111, 11010110111, 11011001111, 11011011011, 11011101111, 11011110111, 11011111011, 11011111111, 11100111111, 11101010111, 11101011101, 11101011111, 11101101111, 11101110111, 11101111011, 11101111101, 11101111110, 11101111111, 11110011111, 11110111011, 11110111110, 11110111111, 11111001111, 11111010110, 11111011001, 11111011011, 11111011110, 11111011111, 11111101001, 11111101111, 11111110101, 11111110110, 11111110111, 11111111010, 11111111011, 11111111101, 11111111110, 11111111111, 100001111111, 100010111111, 100101110111, 100101111110, 100101111111, 100110111111, 100111011111, 100111110111, 100111111011, 100111111111, 101001111001, 101010111111, 101011010111, 101011011111, 101011101111, 101011110111, 101011111011, 101011111101, 101011111110, 101011111111, 101100110111, 101101011111, 101101110010, 101101111011, 101101111111, 101110101111, 101110111001, 101110111101, 101110111111, 101111010111, 101111011101, 101111011111, 101111101011, 101111101110, 101111101111, 101111110011, 101111110100, 101111110110, 101111110111, 101111111011, 101111111101, 101111111110, 101111111111, 110001101111, 110001111011, 110001111111, 110010111111, 110011001110, 110011011111, 110011110111, 110011111001, 110011111011, 110011111110, 110011111111, 110101110111, 110101111111, 110110100111, 110110101101, 110110101110, 110110101111, 110110110111, 110110111100, 110110111101, 110110111110, 110110111111, 110111001111, 110111010100, 110111011111, 110111101010, 110111101011, 110111101101, 110111101111, 110111110011, 110111110100, 110111110111, 110111111010, 110111111011, 110111111100, 110111111101, 110111111110, 110111111111, 111000110011, 111000111011, 111000111101, 111000111111, 111001011111, 111001100111, 111001111011, 111001111100, 111001111110, 111001111111, 111010000110, 111010011110, 111010101111, 111010110110, 111010110111, 111010111010, 111010111101, 111010111111, 111011001011, 111011001111, 111011010111, 111011011111, 111011100011, 111011100111, 111011101001, 111011101011, 111011101101, 111011101110, 111011101111, 111011110010, 111011110101, 111011110111, 111011111001, 111011111010, 111011111011, 111011111100, 111011111101, 111011111110, 111011111111, 111100011111, 111100101111, 111100110110, 111100110111, 111100111101, 111100111110, 111100111111, 111101010111, 111101011001, 111101011011, 111101011101, 111101011110, 111101011111, 111101100111, 111101101111, 111101110011, 111101110110, 111101110111, 111101111001, 111101111010, 111101111011, 111101111100, 111101111101, 111101111110, 111101111111, 111110000111, 111110010011, 111110010111, 111110011101, 111110011110, 111110100110, 111110100111, 111110101010, 111110101111, 111110110011, 111110110110, 111110110111, 111110111001, 111110111010, 111110111011, 111110111101, 111110111110, 111110111111, 111111000111, 111111001011, 111111001110, 111111001111, 111111010011, 111111010101, 111111010110, 111111010111, 111111011010, 111111011011, 111111011100, 111111011101, 111111011110, 111111011111, 111111100101, 111111100110, 111111100111, 111111101010, 111111101011, 111111101101, 111111101110, 111111101111, 111111110001, 111111110011, 111111110100, 111111110101, 111111110110, 111111110111, 111111111000, 111111111001, 111111111010, 111111111011, 111111111100, 111111111101, 111111111110, 111111111111
        };
        bool flag_um(true);
        for(auto *i=std::begin(lista_um); i<std::end(lista_um); ++i){
            if(binario_final == *i){
                flag_um = false;
                break;
            }
        }
        if(flag_um){
            return false;
        }
    }
    

    //terceira analise
    tamanho_amostra = 3; // três jogos
    if((quantidade_de_jogos_sorteados+tamanho_amostra-1)%tamanho_amostra == 0){
        for(auto *i=inicial; i<(inicial+15); ++i){
            novo_jogo.push_back(*i);
        }
        for(auto *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - tamanho_amostra))); i<std::end(numeros_sorteados); ++i){
            novo_jogo.push_back(*i);
        }

        for(auto j(0); j<tamanho_analise; ++j){
            binario[j] = 0;
        }
        
        posicao = 0;
        for(auto *j = std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
            for(auto k(0); k<tamanho_amostra*15; ++k){
                if(*j == novo_jogo[k]){
                    binario[posicao] = 1;
                }
            }
            ++posicao;
        }
        binario_final = 0;
        for(auto j(0); j<tamanho_analise; ++j){
            if(binario[j]==1){
                binario_final += std::pow(10, j);
            }
        }
        novo_jogo.clear();    

            // #### análise ### Modificar variáveis
        size_t lista_um [] = {
            1111110111, 1111111111, 10111111101, 10111111111, 11011111111, 11101111111, 11111011111, 11111110111, 11111111001, 11111111011, 11111111110, 11111111111, 100101111111, 100111111111, 101011111110, 101101111111, 101110111111, 101111110111, 101111111101, 101111111111, 110011111111, 110101111111, 110110111111, 110111011111, 110111101110, 110111101111, 110111110110, 110111110111, 110111111111, 111001111111, 111011001111, 111011011111, 111011101011, 111011110111, 111011111011, 111011111111, 111100111111, 111101101111, 111101110111, 111101111001, 111101111101, 111101111110, 111101111111, 111110101110, 111110110111, 111110111011, 111110111110, 111110111111, 111111001111, 111111010111, 111111011011, 111111011111, 111111100111, 111111101101, 111111101110, 111111101111, 111111110101, 111111110110, 111111110111, 111111111001, 111111111010, 111111111011, 111111111100, 111111111101, 111111111110, 111111111111
        };
        bool flag_um(true);
        for(auto *i=std::begin(lista_um); i<std::end(lista_um); ++i){
            if(binario_final == *i){
                flag_um = false;
                break;
            }
        }
        if(flag_um){
            return false;
        }
    }

    //quarta analise
    tamanho_amostra = 5; // cinco jogos
    if((quantidade_de_jogos_sorteados+tamanho_amostra-1)%tamanho_amostra == 0){
        for(auto *i=inicial; i<(inicial+15); ++i){
            novo_jogo.push_back(*i);
        }
        for(auto *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - tamanho_amostra))); i<std::end(numeros_sorteados); ++i){
            novo_jogo.push_back(*i);
        }

        for(auto j(0); j<tamanho_analise; ++j){
            binario[j] = 0;
        }
        
        posicao = 0;
        for(auto *j = std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
            for(auto k(0); k<tamanho_amostra*15; ++k){
                if(*j == novo_jogo[k]){
                    binario[posicao] = 1;
                }
            }
            ++posicao;
        }
        binario_final = 0;
        for(auto j(0); j<tamanho_analise; ++j){
            if(binario[j]==1){
                binario_final += std::pow(10, j);
            }
        }
        novo_jogo.clear();    

            // #### análise ### Modificar variáveis
        size_t lista_um [] = {
            11111111111, 101111111111, 110111111111, 111011111111, 111101111111, 111111011111, 111111101111, 111111110111, 111111111011, 111111111101, 111111111110, 111111111111
        };
        bool flag_um(true);
        for(auto *i=std::begin(lista_um); i<std::end(lista_um); ++i){
            if(binario_final == *i){
                flag_um = false;
                break;
            }
        }
        if(flag_um){
            return false;
        }
    }

    //quinta analise
    int numeros_adicionais[] = {8, 13, 21, 34, 55, 89, 144};
    for(auto *k=std::begin(numeros_adicionais); k<std::end(numeros_adicionais); ++k){
        tamanho_amostra = *k; // jogos
        if((quantidade_de_jogos_sorteados+tamanho_amostra-1)%tamanho_amostra == 0){
            for(auto *i=inicial; i<(inicial+15); ++i){
                novo_jogo.push_back(*i);
            }
            for(auto *i=((std::begin(numeros_sorteados))+(15*(quantidade_de_jogos_sorteados + 1 - tamanho_amostra))); i<std::end(numeros_sorteados); ++i){
                novo_jogo.push_back(*i);
            }

            for(auto j(0); j<tamanho_analise; ++j){
                binario[j] = 0;
            }
            
            posicao = 0;
            for(auto *j = std::begin(numeros_p_analise); j<std::end(numeros_p_analise); ++j){
                for(auto k(0); k<tamanho_amostra*15; ++k){
                    if(*j == novo_jogo[k]){
                        binario[posicao] = 1;
                    }
                }
                ++posicao;
            }
            binario_final = 0;
            for(auto j(0); j<tamanho_analise; ++j){
                if(binario[j]==1){
                    binario_final += std::pow(10, j);
                }
            }
            novo_jogo.clear();    

                // #### análise ### Modificar variáveis
            size_t lista_um [] = {
                111111111111
            };
            bool flag_um(true);
            for(auto *i=std::begin(lista_um); i<std::end(lista_um); ++i){
                if(binario_final == *i){
                    flag_um = false;
                    break;
                }
            }
            if(flag_um){
                return false;
            }
        }
    }    
    
    return true;
}